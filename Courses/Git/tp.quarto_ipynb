{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: Version control with Git\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## Setting your Git environment\n",
        "\n",
        "On a terminal, specify the email address with which you will make your commits:\n",
        "```bash\n",
        "$ git config --global user.email \"prenom.nom@domaine.fr\"\n",
        "```\n",
        "Of course **Adapt the email address** prenom.nom@domaine.fr **to your case!**.\n",
        "\n",
        "You may also (optional) configure another option (yet mysterious)\n",
        "\n",
        "```bash\n",
        "$ git config --global pull.rebase false\n",
        "```\n",
        "\n",
        "## Create an SSH key\n",
        "\n",
        "### Unix system\n",
        "\n",
        "The SSH is needed to get a smooth authentication to the remote repository. In a terminal:\n",
        "```bash\n",
        "$ ssh-keygen -t rsa -b 4096 -C prenom.nom@domaine.fr\n",
        "```\n",
        "Accept the default option (keys saved in `~/.ssh` and no passphrase)\n",
        "\n",
        "```bash\n",
        "ssh-add\n",
        "```\n",
        "*Reference:* [Github docs](https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent) on connecting with SSH.\n",
        "\n",
        "### Windows\n",
        "\n",
        "*Reference:* [The Server Side](https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/GitHub-SSH-Windows-Example): How to SSH into GitHub on Windows example, by Cameron McKenzie\n",
        "\n",
        "# Setting up your GitHub account\n",
        "\n",
        "GitHub is a web hosting service for remote repositories using git. GitHub includes additional features for collaboration, such as bug tracking, requests to add features or task management.\n",
        "\n",
        "Note that there are other git-based hosting websites such as GitLab or BitBucket.\n",
        "\n",
        "### Create a GitHub account\n",
        "\n",
        "Please go to [Github](https://github.com/) and follow the instructions for creating or activating your account.\n",
        "\n",
        "### Add your SSH key\n",
        "\n",
        "To display your public key, simply type in a terminal,\n",
        "```bash\n",
        "$ cat ~/.ssh/id_rsa.pub\n",
        "```\n",
        "Copy the result into the clipboard and add your key to your GitHub account, following the procedure explained on GitHub [here](https://help.github.com/en/github/authenticating-to-github/adding-a-new-ssh-key-to-your-github-account).\n",
        "\n",
        "To check your installation, please follow the instructions given on GitHub [here](https://help.github.com/en/github/authenticating-to-github/testing-your-ssh-connection)\n",
        "\n",
        "\n",
        "## Create a remote repository\n",
        "\n",
        "Let us create a remote repository hosted on your GitHub account.\n",
        "\n",
        "On GitHub, click on the `+` symbol at the top right of the page, then `New repository`. Give the name `FirstRepo` to your new project and a short description.\n",
        "\n",
        "Create a **public** repository, meaning that everyone can access your code (read-only). Finish by clicking on `Create repository`.\n",
        "\n",
        "\n",
        "Follow the instructions provided by GitHub to create your local copy of the repository:\n",
        "\n",
        "1. Create a new folder called `FirstRepo` in your `home` directory and `cd` to it\n",
        "2. Then execute the following command **changing the `XXXXXXXXXXX` with the relevent URL**.\n",
        "\n",
        "    ```bash\n",
        "    echo \"# FirstRepo\" >> README.md\n",
        "    git init\n",
        "    git add README.md\n",
        "    git commit -m \"first commit\"\n",
        "    git branch -M main\n",
        "    git remote add origin git@github.com:XXXXXXXXXXXXXXXXXX/FirstRepo.git\n",
        "    git push --set-upstream  origin main\n",
        "    ```\n",
        "\n",
        "::: {.callout-important appearance='default' icon=\"false\"}\n",
        "##  EXERCISE: gitignore\n",
        "\n",
        "  1. Create a text file called `.gitignore`Â with the following content:\n",
        "\n",
        "```bash\n",
        "*.pdf\n",
        "*~\n",
        "```\n",
        "  2. Create a commit and push it to your repository. What is the purpose of this file? See <https://github.com/github/gitignore>\n",
        ":::\n",
        "\n",
        "# Interact with other users\n",
        "\n",
        "The purpose of this exercise is to learn how to use git as a collaboration tool for software development.\n",
        "\n",
        "## Using an existing repository\n",
        "\n",
        "Browse the repository at <https://github.com/bcharlier/HAX712X_2023>. What is this module able to do?\n",
        "\n",
        "\n",
        "\n",
        "::: {.callout-important appearance='default' icon=\"false\"}\n",
        "##  EXERCISE: Forking a Git repo\n",
        "Fork the repository by following these steps:\n",
        "\n",
        "  1. On GitHub, click on the fork icon.\n",
        "  2. A copy is added to your GitHub space. Clone it (this copy!) to get a local repository.\n",
        "  3. In a terminal, inspect the output of the command `git remote get-url origin`\n",
        ":::\n",
        "\n",
        "## Debugging\n",
        "\n",
        "A bug has appeared in the Python module after a commit. An issue has been opened in the bug tracking system at <https://github.com/bcharlier/HAX712X_2023/issues/>. Your goal is to find the problem... and then fix it on your **forked repository**. Finally, you will be able to submit a **Pull Request** to the original repository to share your fix.\n",
        "\n",
        "### Identification of the bad commit\n",
        "\n",
        "Your goal is to identify the commit(s) that caused the bug. Use `git log`, `git diff`, `git checkout` to identify the commit responsible for the problem.\n",
        "\n",
        "*Reference:* [Git Bisect](https://delicious-insights.com/en/posts/git-bisect/)\n",
        "\n",
        "### Create a new branch to fix the problem\n",
        "\n",
        "To fix a complex bug or add a new feature, it is often necessary to modify several parts of the code.\n",
        "We create a branch, where we make all the commits dedicated to solving the bug. The idea is to maintain a stable version, in the branch `main`, separated from the developing version, which may contain bugs.\n",
        "\n",
        "\n",
        "::: {.callout-important appearance='default' icon=\"false\"}\n",
        "## EXERCISE: branches\n",
        "\n",
        "  1. Create a local branch `Fix_EOL_Error`\n",
        "  2. Push this local branch to your remote repo.\n",
        "  3. Switch to the `Fix_EOL_Error` branch, and fix the bugs. The branch `main` will not be affected.\n",
        "  4. Merge the fix into the branch `main`\n",
        "  5. Delete the local branch `Fix_EOL_Error` and the remote `origin/Fix_EOL_Error` branch\n",
        ":::\n",
        "\n",
        "### Pull request\n",
        "\n",
        "Your work about bug fixing may interest the original author of the project. On GitHub, open a pull request (PR). PRs are a set of commits that can be integrated directly by the author of the project in its repository and are thus a powerful tool for working with others.\n",
        "\n",
        "## Branch Merging and Solving conflicts\n",
        "\n",
        "::: {.callout-important appearance='default' icon=\"false\"}\n",
        "##  EXERCISE: Conflicts identification\n",
        "\n",
        "  1. Switch to the branch `NonGaussian`. Try to figure out what has changed compared to the `main` branch.\n",
        "  2. Try to merge the branch `NonGaussian` to the branch `main`.\n",
        "  3. Where are located the conflicts? They are shown with the following decorator.\n",
        "\n",
        "  ```bash\n",
        "  <<<<<<< HEAD\n",
        "  Some code on the current branch\n",
        "  =======\n",
        "\n",
        "  Some code on the branch to be merged\n",
        "  >>>>>>> NonGaussian\n",
        "  ```\n",
        "\n",
        "  4. Resolve them by plotting the two histograms on the same plot. Namely, produce a figure like this:![plot](plot.png)\n",
        ":::\n",
        "\n",
        "\n",
        "## References\n",
        "\n",
        "- Please visit <https://learngitbranching.js.org/>\n"
      ],
      "id": "4956a187"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/emilieaigoin/miniconda3/envs/hax712_env/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}